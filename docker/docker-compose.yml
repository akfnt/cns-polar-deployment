version: "3.8"                              # 도커 컴포즈 구문 버전
services:                                   # 실행할 모든 컨테이너를 나열하는 섹션
  # Applications

  cns-catalog-service:                      # cns-catalog-service 컨테이너를 기술하는 섹션
    depends_on:                             # 카탈로그 서비스는 PostgreSQL 데이터베이스 이후에 시작해야 함
      - polar-postgres
      - cns-config-service
    image: "cns-catalog-service"
    container_name: "cns-catalog-service"
    ports:                                  # 포트 맵핑 목록을 위한 섹션
      - 9001:9001
      - 8001:8001                           # JVM 이 디버그 연결을 듣는 포트
    environment:                            # 환경 변수를 나열하는 섹션
      - BPL_JVM_THREAD_COUNT=50             # 메모리 계산을 위한 스레드의 수를 설정하는 패키토 빌드팩 환경 변수
      - BPL_DEBUG_ENABLED=true              # IDE 원격 디버그 연결(마치 로컬에서 실행하는 것처럼 브레이크 포인트 등 사용하여 디버깅 할 수 있다)을 수락하기 위한 JVM 설정을 활성화 (빌드팩에 의해 제공)
      - BPL_DEBUG_PORT=8001                 # 디버그 연결은 8001 포트를 통해 받는다 (빌드팩에 의해 제공)
      - SPRING_DATASOURCE_URL=jdbc:postgresql://polar-postgres:5432/polardb_catalog
      - POLAR_TESTDATA_ENABLED=true         # 'polar.testdata.enabled' systemProperty 활성화
      - SPRING_CLOUD_CONFIG_URI=http://cns-config-service:8888
      - SPRING_CLOUD_CONFIG_FAIL-FAST=true  # depends_on은 서버가 시작될때까지만 기다리며 config 서버가 연결을 수락할 준비가 되기까지는 기다려주지 않음..
                                            # depends_on에 health check 기능을 추가하는 방법도 있지만, 일단 간단하게 retry 할 수 있도록 환경 변수 지정
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://host.docker.internal:8080/realms/PolarBookshop

  cns-order-service:
    depends_on:
      - polar-postgres
      - cns-config-service
    image: "cns-order-service"
    container_name: "cns-order-service"
    ports:
      - 9002:9002
      - 8002:8002
    environment:
      - BPL_JVM_THREAD_COUNT=50
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=8002
      - POLAR_CATALOG_SERVICE_URI=http://cns-catalog-service:9001
      - SPRING_CLOUD_CONFIG_URI=http://cns-config-service:8888
      - SPRING_CLOUD_CONFIG_FAIL-FAST=true
      - SPRING_R2DBC_URL=r2dbc:postgresql://polar-postgres:5432/polardb_order
      - SPRING_FLYWAY_URL=jdbc:postgresql://polar-postgres:5432/polardb_order
      - SPRING_RABBITMQ_HOST=polar-rabbitmq
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://host.docker.internal:8080/realms/PolarBookshop

  cns-edge-service:
    depends_on:
      - polar-redis
      - cns-config-service
    image: "cns-edge-service"
    container_name: "cns-edge-service"
    ports:
      - 9000:9000
      - 8000:8000
    environment:
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=8000
      - CATALOG_SERVICE_URL=http://cns-catalog-service:9001
      - ORDER_SERVICE_URL=http://cns-order-service:9002
      - SPA_URL=http://polar-ui:9004
      - SPRING_CLOUD_CONFIG_URI=http://cns-config-service:8888
      - SPRING_DATA_REDIS_HOST=polar-redis
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI=http://host.docker.internal:8080/realms/PolarBookshop

  cns-dispatcher-service:
    depends_on:
      - polar-rabbitmq
      - cns-config-service
    image: "cns-dispatcher-service"
    container_name: "cns-dispatcher-service"
    ports:
      - 9003:9003
      - 8003:8003
    environment:
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=8003
      - SPRING_CLOUD_CONFIG_URI=http://cns-config-service:8888
      - SPRING_RABBITMQ_HOST=polar-rabbitmq

  cns-config-service:
    image: "cns-config-service"
    container_name: "cns-config-service"
    ports: # 포트 맵핑 목록을 위한 섹션
      - 8888:8888
      - 9888:9888                           # JVM 이 디버그 연결을 듣는 포트
    environment: # 환경 변수를 나열하는 섹션
      - BPL_JVM_THREAD_COUNT=50             # 메모리 계산을 위한 스레드의 수를 설정하는 패키토 빌드팩 환경 변수
      - BPL_DEBUG_ENABLED=true              # IDE 원격 디버그 연결(마치 로컬에서 실행하는 것처럼 브레이크 포인트 등 사용하여 디버깅 할 수 있다)을 수락하기 위한 JVM 설정을 활성화 (빌드팩에 의해 제공)
      - BPL_DEBUG_PORT=9888                 # 디버그 연결은 8001 포트를 통해 받는다 (빌드팩에 의해 제공)

  polar-ui:
    image: "ghcr.io/polarbookshop/polar-ui:v1"  # 앵귤러 애플리케이션 컨테이너 이미지
    container_name: "polar-ui"
    ports:
      - 9004:9004                           # NGINX 가 포트 9004를 통해 SPA를 제공
    environment:
      - PORT=9004                           # NGINX 의 서버 포트를 설정

# Backing Services

  polar-postgres:
    image: "postgres:14.4"
    container_name: "polar-postgres"
    ports:
      - 5432:5432
    environment:                            # POSTGRES_DB 환경 변수에 대해 더 이상 값이 정의되지 않는다
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:                                # 초기화 SQL 스크립트를 컨테이너에 볼륨으로 마운트한다
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql

  polar-redis:
    image: "redis:7.0"
    container_name: "polar-redis"
    ports:
      - 6379:6379

  polar-rabbitmq:
    image: rabbitmq:3.13-management         # 관리 플러그인이 활성화된 rabbitmq 공식 이미지
    container_name: polar-rabbitmq
    ports:
      - 5672:5672                           # rabbitmq 가 AMQP 요청을 듣는 포트
      - 15672:15672                         # 관리 GUI 를 노출하는 포트
    volumes:                                # 볼륨으로 마운트된 설정파일
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  polar-keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: "polar-keycloak"
    command: start-dev --import-realm       # 키클록을 개발모드로 (내장 DB를 사용해) 시작한다. 애플리케이션 시작시 제공된 설정을 임포트한다
    volumes:                                # 설정 파일을 컨테이너 안으로 로드하기 위한 볼륨 설정
      - ./keycloak:/opt/keycloak/data/import
    environment:
      - KEYCLOAK_ADMIN=user
      - KEYCLOAK_ADMIN_PASSWORD=password
    ports:
      - 8080:8080

# Observability

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: grafana
    depends_on:
      - loki
      - prometheus
      - tempo
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=user           # 그라파나를 액세스하기 위한 유저명과 패스워드
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./observability/grafana/grafana.ini:/etc/grafana/grafana.ini

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    depends_on:
      - fluent-bit
    ports:
      - "3100:3100"

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:2.9.1
    container_name: fluent-bit
    ports:
      - "24224:24224"
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push                                    # 로그 메시지를 전달할 Loki URL 정의
    volumes:
      - ./observability/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf    # 로그를 수집하고 전달하기 위한 설정을 로드하는 데 사용되는 볼륨

  prometheus:
    image: quay.io/prometheus/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    command: -config.file=/etc/tempo-config.yml
    ports:
      - "3110:3100"     # Tempo
      - "4317:4317"     # OTel
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo-config.yml